/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Lexical Cast
 #	author : miyako
 #	2016/02/08
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- REAL

		case 1 :
			Number_to_text(pResult, pParams);
			break;

	}
}

// ------------------------------------- REAL -------------------------------------

#include <sstream>
#ifndef snprintf
#define snprintf _snprintf
#endif
namespace CONVERT
{
	void toText(double value, unsigned int precision, C_TEXT &returnValue)
	{
		std::vector<char> buf(32 + precision);
		snprintf((char *)&buf[0], buf.size(), "%.*f", precision, value);
		CUTF8String str((const uint8_t *)&buf[0]);
		returnValue.setUTF8String(&str);
	}
}

void Number_to_text(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_REAL Param1;
	C_LONGINT Param2;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	CONVERT::toText(Param1.getDoubleValue(), Param2.getIntValue(), returnValue);

	returnValue.setReturn(pResult);
}

